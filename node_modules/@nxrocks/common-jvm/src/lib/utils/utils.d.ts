import { Tree } from '@nx/devkit';
import { BuilderCommandAliasType, BuilderCore } from '../builders';
import { PackageInfo } from '@nxrocks/common';
export declare const LARGE_BUFFER: number;
export declare const JVM_PROJECT_FILES: string[];
export declare function runBuilderCommand(commandAlias: BuilderCommandAliasType, getBuilder: (cwd: string) => BuilderCore, params: string[], options?: {
    cwd: string;
    ignoreWrapper?: boolean;
    useLegacyWrapper?: boolean;
    runFromParentModule?: boolean;
}): {
    success: boolean;
};
export declare function isMavenProject(project: {
    root: string;
}): boolean;
export declare function isMavenProjectInTree(tree: Tree, rootFolder: string): boolean;
export declare function hasMavenProject(cwd: string): boolean;
export declare function isGradleProject(project: {
    root: string;
}): boolean;
export declare function isGradleProjectInTree(tree: Tree, rootFolder: string): boolean;
export declare function isGradleProjectSettingsInTree(tree: Tree, rootFolder: string): boolean;
export declare function hasGradleProject(cwd: string): boolean;
export declare function hasGradleSettingsFile(cwd: string): boolean;
export declare function hasGradleBuildFile(cwd: string): boolean;
export declare function getGradleBuildFilesExtension(project: {
    root: string;
}): '.gradle.kts' | '.gradle' | undefined;
export declare function getGradleBuildFilesExtensionInTree(tree: Tree, rootFolder: string): '.gradle.kts' | '.gradle' | undefined;
export declare const getGradleDependencyIdRegEx: () => RegExp;
export declare function getJvmPackageInfo(project: {
    root: string;
}): PackageInfo;
export declare function checkProjectBuildFileContains(project: {
    root: string;
}, opts: {
    fragments: string[];
    logicalOp?: 'and' | 'or';
}, searchInParentModule?: boolean): boolean;
export declare function checkProjectFileContains(content: string, opts: {
    fragments: (string | RegExp)[];
    logicalOp?: 'and' | 'or';
}): boolean;
export declare function getPathFromParentModule(cwd: string): string;
export declare function getPathToParentModule(cwd: string): string;
export declare function getAdjustedProjectAndModuleRoot(options: {
    projectRoot: string;
    addToExistingParentModule?: boolean;
    parentModuleName?: string;
}, isMavenProject: boolean): Promise<{
    projectRoot: string;
    moduleRoot: string;
    offsetFromRoot: string;
}>;
