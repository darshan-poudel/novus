"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const index_1 = require("../../index");
const common_jvm_1 = require("@nxrocks/common-jvm");
function update(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const targetExecutors = [`${index_1.NX_SPRING_BOOT_PKG}:run`, `${index_1.NX_SPRING_BOOT_PKG}:serve`];
        (0, common_jvm_1.updateProjectConfigurationIf)(tree, (project) => project.projectType === 'application', (project) => {
            var _a, _b;
            for (const target of Object.values((_a = project.targets) !== null && _a !== void 0 ? _a : {})) {
                if (target.executor && targetExecutors.includes(target.executor)) {
                    (_b = target.dependsOn) !== null && _b !== void 0 ? _b : (target.dependsOn = []);
                    if (!target.dependsOn.includes('^install')) {
                        target.dependsOn.push('^install');
                    }
                }
            }
        });
        // update options from nx.json target defaults
        (0, common_jvm_1.updateNxJsonIf)(tree, (nxJson) => !!nxJson.targetDefaults, (nxJson) => {
            var _a;
            for (const [targetOrExecutor, targetConfig] of Object.entries(nxJson.targetDefaults)) {
                if (targetExecutors.includes(targetOrExecutor)) {
                    (_a = targetConfig.dependsOn) !== null && _a !== void 0 ? _a : (targetConfig.dependsOn = []);
                    if (!targetConfig.dependsOn.includes('^install')) {
                        targetConfig.dependsOn.push('^install');
                    }
                }
            }
        });
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = update;
//# sourceMappingURL=make-serve-target-depends-on-dependency-install.js.map