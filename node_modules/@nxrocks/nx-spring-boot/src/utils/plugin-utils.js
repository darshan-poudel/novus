"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectTypeAndTargetsFromOptions = exports.getProjectTypeAndTargetsFromFile = void 0;
const devkit_1 = require("@nx/devkit");
const common_jvm_1 = require("@nxrocks/common-jvm");
const __1 = require("..");
const plugin_1 = require("../graph/plugin");
function getProjectTypeAndTargetsFromFile(projectRootFile, pluginOptions) {
    const { root, name } = (0, common_jvm_1.getNameAndRoot)(projectRootFile);
    const buildSystem = (0, common_jvm_1.hasMavenProject)(root)
        ? 'maven-project'
        : name.endsWith('.kts')
            ? 'gradle-project-kotlin'
            : 'gradle-project';
    const runFromParentModule = !(0, common_jvm_1.hasMavenWrapper)(root) && !(0, common_jvm_1.hasGradleWrapper)(root);
    let skipFormat = true;
    let projectType = 'library';
    if (buildSystem === 'maven-project') {
        skipFormat = (0, common_jvm_1.hasMavenPlugin)(root, common_jvm_1.SPOTLESS_MAVEN_PLUGIN_GROUP_ID, common_jvm_1.SPOTLESS_MAVEN_PLUGIN_ARTIFACT_ID);
        projectType = (0, common_jvm_1.hasMavenPlugin)(root, 'org.springframework.boot', 'spring-boot-maven-plugin')
            ? 'application'
            : 'library';
    }
    else {
        const projectContent = (0, common_jvm_1.getProjectFileContent)({ root }, `build${(0, common_jvm_1.getGradleBuildFilesExtension)({ root })}`);
        skipFormat = (0, common_jvm_1.hasGradlePlugin)(projectContent, common_jvm_1.SPOTLESS_GRADLE_PLUGIN_ID);
        projectType =
            (0, common_jvm_1.getGradlePlugin)(projectContent, 'org.springframework.boot').applied ===
                false
                ? 'library'
                : 'application';
    }
    return getProjectTypeAndTargets(root, projectType, buildSystem, runFromParentModule, skipFormat, (0, plugin_1.normalizePluginOptions)(pluginOptions));
}
exports.getProjectTypeAndTargetsFromFile = getProjectTypeAndTargetsFromFile;
function getProjectTypeAndTargetsFromOptions(options) {
    return getProjectTypeAndTargets(options.projectRoot, options.projectType, options.buildSystem, !options.keepProjectLevelWrapper, options.skipFormat, (0, plugin_1.normalizePluginOptions)());
}
exports.getProjectTypeAndTargetsFromOptions = getProjectTypeAndTargetsFromOptions;
function getProjectTypeAndTargets(projectRoot, projectType, buildSystem, runFromParentModule, skipFormat, pluginOptions) {
    const commands = [
        pluginOptions.buildTargetName,
        pluginOptions.installTargetName,
        pluginOptions.testTargetName,
        pluginOptions.cleanTargetName,
    ];
    if (!skipFormat) {
        commands.push(pluginOptions.formatTargetName, pluginOptions.applyFormatTargetName, pluginOptions.checkFormatTargetName);
    }
    const appOnlyCommands = [
        pluginOptions.runTargetName,
        pluginOptions.serveTargetName,
        pluginOptions.buildImageTargetName,
        pluginOptions.buildInfoTargetName,
    ];
    if (projectType === 'application') {
        //only 'application' projects should have 'boot' related commands
        commands.push(...appOnlyCommands);
    }
    const targets = {};
    for (const command of commands) {
        targets[command] = Object.assign(Object.assign({ executor: `${__1.NX_SPRING_BOOT_PKG}:${command}`, options: {
                root: projectRoot,
                runFromParentModule,
            } }, ([
            pluginOptions.buildTargetName,
            pluginOptions.installTargetName,
            pluginOptions.serveTargetName,
            pluginOptions.runTargetName,
        ].includes(command)
            ? { dependsOn: [`^${pluginOptions.installTargetName}`] }
            : {})), ([
            pluginOptions.buildTargetName,
            pluginOptions.buildImageTargetName,
            pluginOptions.installTargetName,
            pluginOptions.testTargetName,
        ].includes(command)
            ? {
                outputs: [
                    (0, devkit_1.joinPathFragments)('{workspaceRoot}', projectRoot, buildSystem === 'maven-project' ? 'target' : 'build'),
                ],
            }
            : {}));
    }
    return { projectType, targets };
}
//# sourceMappingURL=plugin-utils.js.map