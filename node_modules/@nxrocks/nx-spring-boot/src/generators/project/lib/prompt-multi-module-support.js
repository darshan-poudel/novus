"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptForMultiModuleSupport = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const enquirer_1 = require("enquirer");
const common_jvm_1 = require("@nxrocks/common-jvm");
function promptForMultiModuleSupport(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        if ((options.transformIntoMultiModule === undefined || options.addToExistingParentModule === undefined) &&
            options.parentModuleName === undefined &&
            process.env.NX_INTERACTIVE === 'true') {
            devkit_1.logger.info(`⏳ Checking for existing multi-module projects. Please wait...`);
            const projectGraph = yield (0, devkit_1.createProjectGraphAsync)();
            const multiModuleProjects = Object.values(projectGraph.nodes).map(n => n.data).filter(project => options.buildSystem === 'maven-project' ? (0, common_jvm_1.hasMultiModuleMavenProjectInTree)(tree, project.root) : (0, common_jvm_1.hasMultiModuleGradleProjectInTree)(tree, project.root));
            const buildSystemName = options.buildSystem === 'maven-project' ? 'Maven' : 'Gradle';
            if (multiModuleProjects.length === 0) {
                options.transformIntoMultiModule = yield (0, enquirer_1.prompt)({
                    name: 'transformIntoMultiModule',
                    message: `Would you like to transform the generated project into a ${buildSystemName} multi-module project?`,
                    type: 'confirm',
                    initial: false
                }).then((a) => a['transformIntoMultiModule']);
                if (options.transformIntoMultiModule) {
                    options.parentModuleName = (yield (0, enquirer_1.prompt)({
                        name: 'multiModuleName',
                        message: `What name would you like to use for the ${buildSystemName} multi-module project?`,
                        type: 'input',
                        initial: `${options.projectName}-parent`
                    }).then((a) => a['multiModuleName'])).replace(/\//g, '-');
                    options.keepProjectLevelWrapper = yield (0, enquirer_1.prompt)({
                        name: 'keepProjectLevelBuildSystemWrapper',
                        message: `A root ${buildSystemName} wrapper will be added in the root module '${options.parentModuleName}'. Do you want to keep the one in the generated child module '${options.projectName}'?`,
                        type: 'confirm',
                        initial: false
                    }).then((a) => a['keepProjectLevelBuildSystemWrapper']);
                }
            }
            else {
                options.addToExistingParentModule = yield (0, enquirer_1.prompt)({
                    name: 'addToExistingParentModule',
                    message: `We found ${multiModuleProjects.length} existing ${buildSystemName} multi-module projects in your workaspace${multiModuleProjects.length === 1 ? `('${multiModuleProjects[0].name}')` : ''}.\nWould you like to add this new project ${multiModuleProjects.length === 1 ? 'to it?' : 'into one of them?'}`,
                    type: 'confirm',
                    initial: false
                }).then((a) => a['addToExistingParentModule']);
                if (options.addToExistingParentModule) {
                    if (multiModuleProjects.length === 1) {
                        options.parentModuleName = multiModuleProjects[0].name;
                    }
                    else {
                        options.parentModuleName = yield (0, enquirer_1.prompt)({
                            name: 'parentModuleName',
                            message: 'Which parent module would you like to add the new project into?',
                            type: 'select',
                            choices: multiModuleProjects.map(p => p.name),
                        }).then((a) => a['parentModuleName']);
                    }
                }
            }
        }
        if ((options.transformIntoMultiModule || options.addToExistingParentModule) && options.parentModuleName) {
            const helpComment = 'For more information about Spring boot multi-modules projects, go to: https://spring.io/guides/gs/multi-module/';
            const isMavenProject = options.buildSystem === 'maven-project';
            const opts = yield (0, common_jvm_1.getAdjustedProjectAndModuleRoot)(options, isMavenProject);
            options.projectRoot = opts.projectRoot;
            options.moduleRoot = opts.moduleRoot;
            if (options.transformIntoMultiModule) {
                // add the root module
                if (isMavenProject) {
                    (0, common_jvm_1.initMavenParentModule)(tree, options.moduleRoot, options.groupId, options.parentModuleName, options.projectName, `<!-- ${helpComment} -->`);
                }
                else {
                    (0, common_jvm_1.initGradleParentModule)(tree, options.moduleRoot, options.groupId, options.parentModuleName, options.projectName, opts.offsetFromRoot, options.buildSystem === 'gradle-project-kotlin', `// ${helpComment}`);
                }
            }
            else if (options.addToExistingParentModule) {
                // add to the chosen root module
                if (isMavenProject) {
                    (0, common_jvm_1.addMavenModule)(tree, options.moduleRoot, options.projectName);
                }
                else {
                    (0, common_jvm_1.addGradleModule)(tree, options.moduleRoot, options.projectName, opts.offsetFromRoot, options.buildSystem === 'gradle-project-kotlin');
                }
            }
        }
    });
}
exports.promptForMultiModuleSupport = promptForMultiModuleSupport;
//# sourceMappingURL=prompt-multi-module-support.js.map