"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.projectGenerator = void 0;
const tslib_1 = require("tslib");
const lib_1 = require("./lib");
const index_1 = require("../../index");
const plugin_1 = require("../../graph/plugin");
const common_jvm_1 = require("@nxrocks/common-jvm");
function projectGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const normalizedOptions = yield (0, lib_1.normalizeOptions)(tree, options);
        yield (0, lib_1.promptBootDependencies)(normalizedOptions);
        yield (0, lib_1.promptForMultiModuleSupport)(tree, normalizedOptions);
        (0, lib_1.generateProjectConfiguration)(tree, normalizedOptions);
        yield (0, lib_1.generateBootProject)(tree, normalizedOptions);
        (0, lib_1.addBuilInfoTask)(tree, normalizedOptions);
        if (normalizedOptions.projectType === 'library') {
            // 'library' projects should not be "spring-boot- executable"
            if (normalizedOptions.buildSystem === 'maven-project') {
                (0, lib_1.removeBootMavenPlugin)(tree, normalizedOptions);
            }
            else {
                (0, lib_1.disableBootGradlePlugin)(tree, normalizedOptions);
                (0, lib_1.removeBootBuildImageGradleTask)(tree, normalizedOptions);
            }
            (0, lib_1.createLibraryFiles)(tree, normalizedOptions);
        }
        (0, lib_1.addMavenPublishPlugin)(tree, normalizedOptions);
        if (!options.skipFormat) {
            //if skipFormat is true, then we don't want to add Spotless plugin
            (0, lib_1.addFormattingWithSpotless)(tree, normalizedOptions);
        }
        const defaultPluginOptions = (0, plugin_1.normalizePluginOptions)();
        (0, common_jvm_1.addPluginToNxJson)(index_1.NX_SPRING_BOOT_PKG, tree, defaultPluginOptions, defaultPluginOptions.installTargetName);
    });
}
exports.projectGenerator = projectGenerator;
exports.default = projectGenerator;
//# sourceMappingURL=generator.js.map