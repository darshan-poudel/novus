import { CreateNodesResultWithContext } from './plugins/internal-api';
import { ConfigurationResult } from './utils/project-configuration-utils';
import { ProjectConfiguration } from '../config/workspace-json-project-json';
export declare class ProjectsWithConflictingNamesError extends Error {
    projects: Record<string, ProjectConfiguration>;
    constructor(conflicts: Map<string, string[]>, projects: Record<string, ProjectConfiguration>);
}
export declare function isProjectsWithConflictingNamesError(e: unknown): e is ProjectsWithConflictingNamesError;
export declare class ProjectsWithNoNameError extends Error {
    projects: Record<string, ProjectConfiguration>;
    constructor(projectRoots: string[], projects: Record<string, ProjectConfiguration>);
}
export declare function isProjectsWithNoNameError(e: unknown): e is ProjectsWithNoNameError;
export declare class ProjectConfigurationsError extends Error {
    readonly errors: Array<MergeNodesError | CreateNodesError | ProjectsWithNoNameError | ProjectsWithConflictingNamesError>;
    readonly partialProjectConfigurationsResult: ConfigurationResult;
    constructor(errors: Array<MergeNodesError | CreateNodesError | ProjectsWithNoNameError | ProjectsWithConflictingNamesError>, partialProjectConfigurationsResult: ConfigurationResult);
}
export declare class CreateNodesError extends Error {
    file: string;
    pluginName: string;
    constructor({ file, pluginName, error, }: {
        file: string;
        pluginName: string;
        error: Error;
    });
}
export declare class AggregateCreateNodesError extends Error {
    readonly pluginName: string;
    readonly errors: Array<CreateNodesError>;
    readonly partialResults: Array<CreateNodesResultWithContext>;
    constructor(pluginName: string, errors: Array<CreateNodesError>, partialResults: Array<CreateNodesResultWithContext>);
}
export declare class MergeNodesError extends Error {
    file: string;
    pluginName: string;
    constructor({ file, pluginName, error, }: {
        file: string;
        pluginName: string;
        error: Error;
    });
}
export declare function isCreateNodesError(e: unknown): e is CreateNodesError;
export declare function isAggregateCreateNodesError(e: unknown): e is AggregateCreateNodesError;
export declare function isMergeNodesError(e: unknown): e is MergeNodesError;
